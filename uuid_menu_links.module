<?php
/**
 * @file
 */

/**
 * Implements hook_module_implements_alter().
 */
function uuid_menu_links_module_implements_alter(&$implementations, $hook) {
  if ('menu_alter' === $hook) {
    // Move UUID Menu Links `menu_alter` implementation to the bottom.
    $group = $implementations['uuid_menu_links'];
    unset($implementations['uuid_menu_links']);
    $implementations['uuid_menu_links'] = $group;
  }
}

/**
 * Implements hook_menu_alter().
 */
function uuid_menu_links_menu_alter(&$menu) {
  $original_menu = $menu;
  $uuid_menu_links_info = uuid_menu_links_info();
  foreach ($original_menu as $routing_path => $menu_item) {
    foreach ($uuid_menu_links_info as $info) {
      $rewritable = TRUE;
      $routing_path_pieces = explode('/', $routing_path);
      if (!in_array('%' . $info['menu_token']['original'], $routing_path_pieces)) {
        continue;
      }

      foreach ($info['menu_path']['ignored_tokens'] as $ignorable) {
        if (in_array($ignorable, $routing_path_pieces)) {
          $rewritable = FALSE;
          break;
        }
      }

      if (!$rewritable) {
        continue;
      }

      $new_routing_path = str_replace('%' . $info['menu_token']['original'] . '/', '%' . $info['menu_token']['replacement'] . '/', $routing_path);
      $menu[$new_routing_path] = $menu_item;
      unset($menu[$routing_path]);
    }
  }
}

/**
 * Retrieves the UUID Menu Links transform information.
 *
 * @return array
 *   Returns the transform information.
 */
function uuid_menu_links_info() {
  $uuid_menu_links_info = &drupal_static(__FUNCTION__, array());
  if (empty($uuid_menu_links_info)) {
    foreach (module_implements('uuid_menu_links_info') as $module) {
      $link_info = module_invoke($module, 'uuid_menu_links_info');
      foreach ($link_info as $entity_type => $info) {
        // '5' is the number of characters that are appended to the
        // token to represent the load hook callback, or `_load`.
        $menu_token = substr($info['original_load_hook'], 0, strlen($info['original_load_hook']) - 5);
        $menu_token_replacement = substr($info['load_hook'], 0, strlen($info['load_hook']) - 5);
        $info['menu_token'] = array('original' => $menu_token, 'replacement' => $menu_token_replacement);
        $info['menu_path']['prefix'] = rtrim($info['menu_path']['prefix'], '/');
        if (isset($info['menu_path']['ignored_paths']) && !is_array($info['menu_path']['ignored_paths'])) {
          $info['menu_path']['ignored_paths'] = array($info['menu_path']['ignored_paths']);
        }
        else if (!isset($info['menu_path']['ignored_paths'])) {
          $info['menu_path']['ignored_paths'] = array();
        }

        if (isset($info['menu_path']['ignored_tokens']) && !is_array($info['menu_path']['ignored_tokens'])) {
          $info['menu_path']['ignored_tokens'] = array($info['menu_path']['ignored_tokens']);
        }
        else if (!isset($info['menu_path']['ignored_tokens'])) {
          $info['menu_path']['ignored_tokens'] = array();
        }
        // TODO: Add proper validation for building information.
        $uuid_menu_links_info[$entity_type] = $info;
      }
    }
    // Allow other modules to alter the transform information prior to returning.
    drupal_alter('uuid_menu_links_info', $uuid_menu_links_info);
  }
  return $uuid_menu_links_info;
}

/**
 * Implements hook_uuid_menu_links_info().
 */
function uuid_menu_links_uuid_menu_links_info() {
  return array(
    'node' => array(
      'original_load_hook' => 'node_load',
      'load_hook' => 'uuid_menu_links_universal_node_load',
      'menu_path' => array(
        'prefix' => 'node',
        'ignored_tokens' => array('%node_type'),
      ),
    ),
    'taxonomy_term' => array(
      'original_load_hook' => 'taxonomy_term_load',
      'load_hook' => 'uuid_menu_links_universal_taxonomy_term_load',
      'menu_path' => array('prefix' => 'taxonomy/term'),
    ),
    'file' => array(
      'original_load_hook' => 'file_load',
      'load_hook' => 'uuid_menu_links_universal_file_load',
      'menu_path' => array('prefix' => 'file'),
    ),
    'user' => array(
      'original_load_hook' => 'user_load',
      'load_hook' => 'uuid_menu_links_universal_user_load',
      'menu_path' => array(
        'prefix' => 'user',
        'ignored_path' => array('user/register', 'user/login', 'user/logout', 'user/password'),
      ),
    ),
  );
}

/**
 * Synchronizes all menu links and path aliases with UUIDs.
 */
function uuid_menu_links_sync() {
  // Synchronize through direct SQL select and updates, the
  // newly transformed menu link and path aliases to contain the UUIDs.
  _uuid_menu_links_sync_menu_links();
  _uuid_menu_links_sync_path_aliases();
  // Allow other modules to perform operations on synchronization
  // prior to clearing menu and path caches in the event that they
  // alter the menu or paths themselves.
  module_invoke_all('uuid_menu_links_sync');
  // Clear both `cache_menu` and `cache_path` bins.
  cache_clear_all('*', 'cache_menu', TRUE);
  cache_clear_all('*', 'cache_path', TRUE);
}

/**
 * Transforms a source url to that containing a UUID.
 *
 * @param string $source
 *   The source url passed by reference to transform.
 */
function uuid_menu_links_transform_source(&$source) {
  // TODO: Improve the work that happens here.
  $original_source = $source;
  $uuid_menu_links_info = uuid_menu_links_info();
  foreach ($uuid_menu_links_info as $type => $info) {
    // Ensure that the $original_source contains the menu_path's prefix
    // as well as the original source is not within one of the ignored paths. For example,
    // a user/[uid] would have a prefix of user/, however the source may actually be
    // user/register in which should not be transformed to contain a UUID.
    if (0 === strpos($original_source, $info['menu_path']['prefix'] . '/') && !in_array($original_source, $info['menu_path']['ignored_paths'])) {
      $prefix = $info['menu_path']['prefix'];
      $original_source = str_replace($info['menu_path']['prefix'] . '/', '', $original_source);
      $source_pieces = explode('/', $original_source);
      $identifier = array_shift($source_pieces);
      $suffix = implode('/', $source_pieces);
      // Should the identifier listed be simply the replacement token,
      // immediately return as invoking any sort of load hook will present an error.
      if ('%' === $identifier) {
        return;
      }
      // Invoke the newly available load hook and transform the source to
      // contain the UUID should the UUID exist on the loaded item.
      $load_hook = $info['load_hook'];
      $item = $load_hook($identifier);
      if (!empty($item->uuid)) {
        $source = $prefix . '/' . $item->uuid . (!empty($suffix) ? ('/' . $suffix) : '');
        return;
      }
    }
  }
}

/**
 * Implements hook_menu_link_insert().
 */
function uuid_menu_links_menu_link_insert($link) {
  _uuid_menu_links_menu_link_save($link);
}

/**
 * Implements hook_menu_link_update().
 */
function uuid_menu_links_menu_link_update($link) {
  _uuid_menu_links_menu_link_save($link);
}

/**
 * Implements hook_path_insert().
 */
function uuid_menu_links_path_insert($path) {
  _uuid_menu_links_path_save($path);
}

/**
 * Implements hook_path_update().
 */
function uuid_menu_links_path_update($path) {
  _uuid_menu_links_path_save($path);
}

/**
 * Implements hook_menu_get_object_load_type_alter().
 */
function uuid_menu_links_menu_get_object_load_type_alter(&$type, $original_type) {
  $uuid_menu_links_info = uuid_menu_links_info();
  if (isset($uuid_menu_links_info[$original_type]) && $original_type == $uuid_menu_links_info[$original_type]['menu_token']['original']) {
    $type = $uuid_menu_links_info[$original_type]['menu_token']['replacement'];
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function uuid_menu_links_pathauto_alias_alter($alias, &$context) {
  uuid_menu_links_transform_source($context['source']);
}

/**
 * Implements hook_pathauto_existing_alias_source_alter().
 */
function uuid_menu_links_pathauto_existing_alias_source_alter(&$source) {
  uuid_menu_links_transform_source($source);
}

/**
 * Load hook for %uuid_menu_links_universal_node menu token.
 *
 * @param string $identifier
 *   The identifier of the node to load, either a UUID or node id.
 *
 * @return object
 *   Returns the single loaded node by the $identifier if exists, otherwise false.
 */
function uuid_menu_links_universal_node_load($identifier = NULL) {
  $node = entity_uuid_load('node', array($identifier));
  $node = !empty($node) && is_array($node) ? reset($node) : NULL;
  if (empty($node)) {
    $node = node_load($identifier);
  }
  return $node;
}

/**
 * Load hook for %uuid_menu_links_universal_taxonomy_term menu token.
 *
 * @param string $identifier
 *   The identifier of the taxonomy term to load, either UUID or TID.
 *
 * @return object
 *   Returns the single loaded term by the $identifier if exists, otherwise false.
 */
function uuid_menu_links_universal_taxonomy_term_load($identifier = NULL) {
  $taxonomy_term = entity_uuid_load('taxonomy_term', array($identifier));
  $taxonomy_term = !empty($taxonomy_term) && is_array($taxonomy_term) ? reset($taxonomy_term) : NULL;
  if (empty($taxonomy_term)) {
    $taxonomy_term = taxonomy_term_load($identifier);
  }
  return $taxonomy_term;
}

/**
 * Load hook for %uuid_menu_links_universal_file menu token.
 *
 * @param string $identifier
 *   The identifier of the file to load, either UUID or FID.
 *
 * @return object
 *   Returns the single loaded file by the $identifier if exists, otherwise false.
 */
function uuid_menu_links_universal_file_load($identifier = NULL) {
  $file = entity_uuid_load('file', array($identifier));
  $file = !empty($file) && is_array($file) ? reset($file) : NULL;
  if (empty($file)) {
    $file = file_load($identifier);
  }
  return $file;
}

/**
 * Load hook for %uuid_menu_links_universal_user_load menu token.
 *
 * @param string $identifier
 *   The identifier of the user to load, either UUID or UID.
 *
 * @return object
 *   Returns the single loaded user by the $identifier if exists, otherwise false.
 */
function uuid_menu_links_universal_user_load($identifier = NULL) {
  $user = entity_uuid_load('user', array($identifier));
  $user = !empty($user) && is_array($user) ? reset($user) : NULL;
  if (empty($user)) {
    $user = user_load($identifier);
  }
  return $user;
}

/**
 * Updates a menu link to contain the UUID instead of a non-portable identifier.
 *
 * @param array
 *   The menu link to update.
 */
function _uuid_menu_links_menu_link_save($link) {
  $original_link_path = $link['link_path'];
  uuid_menu_links_transform_source($link['link_path']);
  if ($original_link_path != $link['link_path']) {
    menu_link_save($link);
  }
}

/**
 * Handles parsing and re-saving of any paths requiring a UUID.
 *
 * @param array $path
 *   The path to resave.
 */
function _uuid_menu_links_path_save($path) {
  $original_source = $path['source'];
  uuid_menu_links_transform_source($path['source']);
  if ($original_source != $path['source']) {
    path_save($path);
  }
}

/**
 * Handles the menu link synchronization with UUID representations.
 */
function _uuid_menu_links_sync_menu_links() {
  $query = db_select('menu_links', 'ml')
    ->fields('ml')
    ->condition(_uuid_menu_links_select_build_or('ml.link_path'))
    ->execute();
  while ($link = $query->fetch()) {
    $original = $link->link_path;
    uuid_menu_links_transform_source($link->link_path);
    if ($original != $link->link_path) {
      db_update('menu_links')
        ->fields(array('link_path' => $link->link_path))
        ->condition('mlid', $link->mlid)
        ->execute();
    }
  }
}

/**
 * Handles the path alias synchronization with UUID representations.
 */
function _uuid_menu_links_sync_path_aliases() {
  $query = db_select('url_alias', 'p')
    ->fields('p')
    ->condition(_uuid_menu_links_select_build_or('p.source'))
    ->execute();
  while ($path = $query->fetch()) {
    $original = $path->source;
    uuid_menu_links_transform_source($path->source);
    if ($original != $path->source) {
      db_update('url_alias')
        ->fields(array('source' => $path->source))
        ->condition('pid', $path->pid)
        ->execute();
    }
  }
}

/**
 * Builds a `db_or()` condition containing path aliases prefixes.
 *
 * @param string $field
 *   The field in which the LIKE comparison should be performed on.
 *
 * @return DatabaseCondition
 *   The combined `db_or()` condition.
 */
function _uuid_menu_links_select_build_or($field) {
  $or = db_or();
  foreach (uuid_menu_links_info() as $info) {
    $or->condition($field, db_like($info['menu_path']['prefix'] . '/') . '%', 'LIKE');
  }
  return $or;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Re-implementation of the path module's node_form() alter. This is
 * cecause we attempt to limit the number of patches applied to projects,
 * and the path module loads sources using node ids, let's attempt
 * to reload using the node's UUID.
 */
function uuid_menu_links_form_node_form_alter(&$form, $form_state) {
  if (empty($form['path']['pid']['#value'])) {
    $path = array();
    if (!empty($form['#node']->uuid)) {
      $conditions = array('source' => 'node/' . $form['#node']->uuid);
      $langcode = entity_language('node', $form['#node']);
      if (LANGUAGE_NONE != $langcode) {
        $conditions['language'] = $langcode;
      }
      $path = path_load($conditions);
      if (FALSE === $path) {
        $path = array();
      }
    }
    $path += array(
      'pid' => NULL,
      'source' => isset($form['#node']->uuid) ? 'node/' . $form['#node']->uuid : NULL,
      'alias' => '',
      'language' => isset($langcode) ? $langcode : LANGUAGE_NONE,
    );
    $form['path']['alias']['#default_value'] = $path['alias'];
    $form['path']['pid']['#value'] = $path['pid'];
    $form['path']['source']['#value'] = $path['source'];
    $form['path']['language']['#value'] = $path['language'];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for taxonomy_form_term().
 *
 * Re-implementation of the path module's taxonomy_form() alter. This is
 * because we attempt to limit the number of patches applied to projects,
 * and the path module loads sources using the taxonomy term's id, let's attempt
 * to reload using the taxonomy term's UUID.
 */
function uuid_menu_links_form_taxonomy_form_term_alter(&$form, $form_state) {
  if (empty($form_state['confirm_delete']) && empty($form['path']['pid']['#value'])) {
    $langcode = entity_language('taxonomy_term', (object) $form['#term']);
    $langcode = !empty($langcode) ? $langcode : LANGUAGE_NONE;
    $conditions = array('source' => 'taxonomy/term/' . $form['#term']['uuid'], 'language' => $langcode);
    $path = isset($form['#term']['uuid']) ? path_load($conditions) : array();
    if (FALSE === $path) {
      $path = array();
    }
    $path += array(
      'pid' => NULL,
      'source' => isset($form['#term']['uuid']) ? 'taxonomy/term/' . $form['#term']['uuid'] : NULL,
      'alias' => '',
      'language' => $langcode,
    );
    $form['path']['alias']['#default_value'] = $path['alias'];
    $form['path']['pid']['#value'] = $path['pid'];
    $form['path']['source']['#value'] = $path['source'];
    $form['path']['language']['#value'] = $path['language'];
  }
}
